<?php

namespace Proxies\__CG__\models\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Category extends \models\Entities\Category implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getCategoryId()
    {
        $this->__load();
        return parent::getCategoryId();
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function getSlug()
    {
        $this->__load();
        return parent::getSlug();
    }

    public function getPrMenu()
    {
        $this->__load();
        return parent::getPrMenu();
    }

    public function getScMenu()
    {
        $this->__load();
        return parent::getScMenu();
    }

    public function getFpt()
    {
        $this->__load();
        return parent::getFpt();
    }

    public function getFpb()
    {
        $this->__load();
        return parent::getFpb();
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function getStories()
    {
        $this->__load();
        return parent::getStories();
    }

    public function setCategoryId($CategoryId)
    {
        $this->__load();
        return parent::setCategoryId($CategoryId);
    }

    public function setTitle($Title)
    {
        $this->__load();
        return parent::setTitle($Title);
    }

    public function setSlug($Slug)
    {
        $this->__load();
        return parent::setSlug($Slug);
    }

    public function setPrMenu($Menu)
    {
        $this->__load();
        return parent::setPrMenu($Menu);
    }

    public function setScMenu($Menu)
    {
        $this->__load();
        return parent::setScMenu($Menu);
    }

    public function setFpt($Fpt)
    {
        $this->__load();
        return parent::setFpt($Fpt);
    }

    public function setFpb($Fpb)
    {
        $this->__load();
        return parent::setFpb($Fpb);
    }

    public function setCreated($Created)
    {
        $this->__load();
        return parent::setCreated($Created);
    }

    public function setUpdated($Updated)
    {
        $this->__load();
        return parent::setUpdated($Updated);
    }

    public function setStatus($Status)
    {
        $this->__load();
        return parent::setStatus($Status);
    }

    public function setStories($Stories)
    {
        $this->__load();
        return parent::setStories($Stories);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'CategoryId', 'Title', 'Slug', 'PrMenu', 'ScMenu', 'Fpt', 'Fpb', 'Created', 'Updated', 'Status', 'Stories');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}